import falcon

from models import Session, OrganizationITAssetVulnerability, OrganizationSecurityThreat, \
    OrganizationVulnerabilityControl


class Collection:
    """POST mitigation controls to IT asset vulnerability."""

    def on_post(self, req, resp, organization_code, it_asset_instance_id, security_threat_id):
        """Adds a control to an IT asset in order to decrease vulnerability against a security threat.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of the security threat.
        """
        session = Session()
        try:
            item = find_vulnerability(security_threat_id, it_asset_instance_id, organization_code, session)
            if item is None:
                raise falcon.HTTPNotFound()

            item = OrganizationVulnerabilityControl()
            item.id = 4

            resp.status = falcon.HTTP_CREATED
            resp.location = req.relative_uri + f'/{item.id}'
        finally:
            session.close()


class Item:
    """DELETE a mitigation control from IT asset vulnerability."""

    def on_delete(self, req, resp, organization_code, it_asset_instance_id, security_threat_id, control_id):
        """Removes a control from an IT asset and against a security threat.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of the security threat.
        :param control_id: The id of the control to be removed.
        """
        session = Session()
        try:
            item = find_vulnerability_control(
                control_id,
                security_threat_id,
                it_asset_instance_id,
                organization_code,
                session
            )
            if item is None:
                raise falcon.HTTPNotFound()

            session.delete(item)
            session.commit()

            resp.status = falcon.HTTP_OK
        finally:
            session.close()


def find_vulnerability(security_threat_id, it_asset_instance_id, organization_id, session):
    query = session \
        .query(OrganizationITAssetVulnerability) \
        .join(OrganizationSecurityThreat) \
        .filter(OrganizationITAssetVulnerability.it_asset_instance_id == it_asset_instance_id)\
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id)\
        .filter(OrganizationSecurityThreat.organization_id == organization_id)

    return query.first()


def find_vulnerability_control(control_id, security_threat_id, it_asset_instance_id, organization_id, session):
    query = session \
        .query(OrganizationVulnerabilityControl) \
        .join(OrganizationITAssetVulnerability) \
        .join(OrganizationSecurityThreat) \
        .filter(OrganizationVulnerabilityControl.id == control_id) \
        .filter(OrganizationITAssetVulnerability.it_asset_instance_id == it_asset_instance_id) \
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id) \
        .filter(OrganizationSecurityThreat.organization_id == organization_id)

    return query.first()
