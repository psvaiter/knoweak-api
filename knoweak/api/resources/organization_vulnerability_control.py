import falcon

from knoweak.api import constants as constants
from knoweak.api.errors import build_error, Message
from knoweak.api.utils import validate_str
from knoweak.api.extensions import HTTPUnprocessableEntity
from knoweak.db import Session
from knoweak.db.models.catalog import MitigationControl
from knoweak.db.models.organization import (
    OrganizationITAssetVulnerability, OrganizationSecurityThreat, OrganizationVulnerabilityControl, OrganizationITAsset
)


class Collection:
    """POST mitigation controls to IT asset vulnerability."""

    def on_post(self, req, resp, organization_code, it_asset_instance_id, security_threat_id):
        """Adds a control to an IT asset in order to decrease vulnerability against a security threat.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of the security threat.
        """
        session = Session()
        try:
            vulnerability = find_vulnerability(security_threat_id, it_asset_instance_id, organization_code, session)
            if vulnerability is None:
                raise falcon.HTTPNotFound()

            errors = validate_post(req.media, organization_code, vulnerability, session)
            if errors:
                raise HTTPUnprocessableEntity(errors)

            accepted_fields = ['mitigation_control_id', 'mitigating_it_asset_id', 'description']
            item = OrganizationVulnerabilityControl().fromdict(req.media, only=accepted_fields)
            item.organization_it_asset_vulnerability_id = vulnerability.id
            session.add(item)
            session.commit()

            resp.status = falcon.HTTP_CREATED
            resp.location = req.relative_uri + f'/{item.id}'
            resp.media = {'data': custom_asdict(item)}
        finally:
            session.close()


class Item:
    """DELETE a mitigation control from IT asset vulnerability."""

    def on_delete(self, req, resp, organization_code, it_asset_instance_id, security_threat_id, control_id):
        """Removes a control from an IT asset and against a security threat.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of the security threat.
        :param control_id: The id of the control to be removed.
        """
        session = Session()
        try:
            item = find_vulnerability_control(
                control_id,
                security_threat_id,
                it_asset_instance_id,
                organization_code,
                session
            )
            if item is None:
                raise falcon.HTTPNotFound()

            session.delete(item)
            session.commit()
        finally:
            session.close()


def validate_post(request_media, organization_code, vulnerability, session):
    errors = []

    # Validate mitigation control id
    # -----------------------------------------------------
    mitigation_control_id = request_media.get('mitigation_control_id')
    if mitigation_control_id is None:
        errors.append(build_error(Message.ERR_FIELD_CANNOT_BE_NULL, field_name='mitigationControlId'))
    elif not session.query(MitigationControl).get(mitigation_control_id):
        errors.append(build_error(Message.ERR_FIELD_VALUE_INVALID, field_name='mitigationControlId'))
    elif find_mitigation_control_in_vulnerability(mitigation_control_id, vulnerability, session):
        errors.append(build_error(Message.ERR_FIELD_VALUE_ALREADY_EXISTS, field_name='mitigationControlId'))

    # Validate mitigating IT asset instance id if informed
    # -----------------------------------------------------
    mitigating_it_asset_id = request_media.get('mitigating_it_asset_id')
    if mitigating_it_asset_id:
        if not find_organization_it_asset(organization_code, mitigating_it_asset_id, session):
            errors.append(build_error(Message.ERR_FIELD_VALUE_INVALID, field_name='mitigatingItAssetId'))
        # Note:
        #   Mitigating IT asset should not be unique in vulnerability control.
        #   Two different mitigation controls can have the same IT asset controlling the vulnerability.

    # Validate description if informed
    # -----------------------------------------------------
    description = request_media.get('description')
    error = validate_str('description', description, max_length=constants.GENERAL_DESCRIPTION_MAX_LENGTH)
    if error:
        errors.append(error)

    return errors


def find_vulnerability(security_threat_id, it_asset_instance_id, organization_id, session):
    query = session \
        .query(OrganizationITAssetVulnerability) \
        .join(OrganizationSecurityThreat) \
        .filter(OrganizationITAssetVulnerability.it_asset_instance_id == it_asset_instance_id)\
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id)\
        .filter(OrganizationSecurityThreat.organization_id == organization_id)

    return query.first()


def find_vulnerability_control(control_id, security_threat_id, it_asset_instance_id, organization_id, session):
    query = session \
        .query(OrganizationVulnerabilityControl) \
        .join(OrganizationITAssetVulnerability) \
        .join(OrganizationSecurityThreat) \
        .filter(OrganizationVulnerabilityControl.id == control_id) \
        .filter(OrganizationITAssetVulnerability.it_asset_instance_id == it_asset_instance_id) \
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id) \
        .filter(OrganizationSecurityThreat.organization_id == organization_id)

    return query.first()


def find_mitigation_control_in_vulnerability(mitigation_control_id, vulnerability, session):
    query = session\
        .query(OrganizationVulnerabilityControl)\
        .join(MitigationControl)\
        .filter(MitigationControl.id == mitigation_control_id)\
        .filter(OrganizationVulnerabilityControl.organization_it_asset_vulnerability_id == vulnerability.id)

    return query.first()


def find_organization_it_asset(organization_id, it_asset_instance_id, session):
    query = session \
        .query(OrganizationITAsset) \
        .filter(OrganizationITAsset.instance_id == it_asset_instance_id) \
        .filter(OrganizationITAsset.organization_id == organization_id)

    return query.first()


def custom_asdict(dictable_model):
    exclude = [
        'organization_it_asset_vulnerability_id',
        'mitigation_control_id',
        'mitigating_it_asset_id'
    ]
    follow = {
        'mitigation_control': {'only': ['id', 'name']},
        'mitigating_it_asset': {'only': ['external_identifier'], 'follow': {
            'it_asset': {'only': ['id', 'name']}
        }}
    }
    return dictable_model.asdict(follow=follow, exclude=exclude)
