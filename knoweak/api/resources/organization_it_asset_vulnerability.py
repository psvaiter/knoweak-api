import falcon

from knoweak.api.errors import Message, build_error
from knoweak.api.extensions import HTTPUnprocessableEntity
from knoweak.api.utils import get_collection_page, patch_item
from knoweak.db import Session
from knoweak.db.models.system import RatingLevel
from knoweak.db.models.organization import (
    OrganizationITAssetVulnerability, OrganizationITAsset, OrganizationSecurityThreat
)


class Collection:
    """GET and POST IT assets vulnerabilities in an organization."""

    def on_get(self, req, resp, organization_code, it_asset_instance_id):
        """GETs a paged collection of an IT assets' vulnerabilities in an organization.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        """
        session = Session()
        try:
            it_asset_instance = find_it_asset_instance(it_asset_instance_id, organization_code, session)
            if it_asset_instance is None:
                raise falcon.HTTPNotFound()

            # Build query to fetch items
            query = session\
                .query(OrganizationITAssetVulnerability) \
                .join(OrganizationSecurityThreat) \
                .filter(OrganizationSecurityThreat.organization_id == organization_code) \
                .order_by(OrganizationITAssetVulnerability.created_on)

            data, paging = get_collection_page(req, query, custom_asdict)
            resp.media = {
                'data': data,
                'paging': paging
            }
        finally:
            session.close()

    def on_post(self, req, resp, organization_code, it_asset_instance_id):
        """Adds a vulnerability to an IT asset of an organization.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        """
        session = Session()
        try:
            it_asset_instance = find_it_asset_instance(it_asset_instance_id, organization_code, session)
            if it_asset_instance is None:
                raise falcon.HTTPNotFound()

            errors = validate_post(req.media, organization_code, it_asset_instance_id, session)
            if errors:
                raise HTTPUnprocessableEntity(errors)

            # Get the entry of organization security from security threat id supplied
            security_threat_id = req.media['security_threat_id']
            organization_security_threat = find_organization_security_threat(
                security_threat_id,
                organization_code,
                session
            )

            item = OrganizationITAssetVulnerability()
            item.organization_security_threat_id = organization_security_threat.id
            item.it_asset_instance_id = it_asset_instance_id
            item.vulnerability_level_id = req.media['vulnerability_level_id']
            session.add(item)
            session.commit()

            resp.status = falcon.HTTP_CREATED
            resp.location = req.relative_uri + f'/{item.id}'
            resp.media = {'data': custom_asdict(item)}
        finally:
            session.close()


class Item:
    """GET, PATCH and DELETE an organization's IT asset vulnerability."""

    def on_get(self, req, resp, organization_code, it_asset_instance_id, security_threat_id):
        """GETs a single vulnerability of an IT asset instance given the security threat.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of security threat.
        """
        session = Session()
        try:
            item = find_it_asset_instance_security_threat(
                security_threat_id,
                it_asset_instance_id,
                organization_code,
                session
            )
            if item is None:
                raise falcon.HTTPNotFound()

            resp.media = {'data': custom_asdict(item)}
        finally:
            session.close()

    def on_patch(self, req, resp, organization_code, it_asset_instance_id, security_threat_id):
        """Updates (partially) the IT asset vulnerability requested.
        All entities that reference the IT asset vulnerability will be affected by the update.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of organization.
        :param it_asset_instance_id: The id of IT asset instance to be patched.
        :param security_threat_id: The id of security threat.
        """
        session = Session()
        try:
            vulnerability = find_it_asset_instance_security_threat(
                security_threat_id,
                it_asset_instance_id,
                organization_code,
                session
            )
            if vulnerability is None:
                raise falcon.HTTPNotFound()

            errors = validate_patch(req.media, session)
            if errors:
                raise HTTPUnprocessableEntity(errors)

            accepted_fields = ['vulnerability_level_id']
            patch_item(vulnerability, req.media, only=accepted_fields)
            session.commit()

            resp.status = falcon.HTTP_OK
            resp.media = {'data': custom_asdict(vulnerability)}
        finally:
            session.close()

    def on_delete(self, req, resp, organization_code, it_asset_instance_id, security_threat_id):
        """Removes an IT asset's vulnerability.

        :param req: See Falcon Request documentation.
        :param resp: See Falcon Response documentation.
        :param organization_code: The code of the organization.
        :param it_asset_instance_id: The id of the IT asset instance.
        :param security_threat_id: The id of security threat to be removed.
        """
        session = Session()
        try:
            item = find_it_asset_instance_security_threat(
                security_threat_id,
                it_asset_instance_id,
                organization_code,
                session
            )
            if item is None:
                raise falcon.HTTPNotFound()

            session.delete(item)
            session.commit()
        finally:
            session.close()


def validate_post(request_media, organization_code, it_asset_instance_id, session):
    errors = []

    # Validate vulnerability level id
    # -----------------------------------------------------
    vulnerability_level_id = request_media.get('vulnerability_level_id')
    if vulnerability_level_id is None:
        errors.append(build_error(Message.ERR_FIELD_CANNOT_BE_NULL, field_name='vulnerabilityLevelId'))
    elif not session.query(RatingLevel).get(vulnerability_level_id):
        errors.append(build_error(Message.ERR_FIELD_VALUE_INVALID, field_name='vulnerabilityLevelId'))

    # Validate security threat id and if it's already in the IT asset vulnerability records
    # -----------------------------------------------------
    security_threat_id = request_media.get('security_threat_id')
    if security_threat_id is None:
        errors.append(build_error(Message.ERR_FIELD_CANNOT_BE_NULL, field_name='securityThreatId'))
    elif not find_organization_security_threat(security_threat_id, organization_code, session):
        errors.append(build_error(Message.ERR_ORGANIZATION_SECURITY_THREAT_ID_INVALID, field_name='securityThreatId'))
    elif find_it_asset_instance_security_threat(security_threat_id, it_asset_instance_id, organization_code, session):
        errors.append(build_error(Message.ERR_FIELD_VALUE_ALREADY_EXISTS, field_name='itAssetInstanceId/securityThreatId'))

    return errors


def validate_patch(request_media, session):
    errors = []

    if not request_media:
        errors.append(build_error(Message.ERR_NO_CONTENT))
        return errors

    # Validate vulnerability level id if informed
    # -----------------------------------------------------
    if 'vulnerability_level_id' in request_media:
        vulnerability_level_id = request_media.get('vulnerability_level_id')

        if vulnerability_level_id is None:
            errors.append(build_error(Message.ERR_FIELD_CANNOT_BE_NULL, field_name='vulnerabilityLevelId'))
        elif not session.query(RatingLevel).get(vulnerability_level_id):
            errors.append(build_error(Message.ERR_FIELD_VALUE_INVALID, field_name='vulnerabilityLevelId'))

    return errors


def find_it_asset_instance(it_asset_instance_id, organization_id, session):
    query = session\
        .query(OrganizationITAsset)\
        .filter(OrganizationITAsset.instance_id == it_asset_instance_id)\
        .filter(OrganizationITAsset.organization_id == organization_id)

    return query.first()


def find_it_asset_instance_security_threat(security_threat_id, it_asset_instance_id, organization_id, session):
    query = session \
        .query(OrganizationITAssetVulnerability) \
        .join(OrganizationSecurityThreat) \
        .filter(OrganizationITAssetVulnerability.it_asset_instance_id == it_asset_instance_id)\
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id)\
        .filter(OrganizationSecurityThreat.organization_id == organization_id)

    return query.first()


def find_organization_security_threat(security_threat_id, organization_id, session):
    query = session\
        .query(OrganizationSecurityThreat)\
        .filter(OrganizationSecurityThreat.organization_id == organization_id)\
        .filter(OrganizationSecurityThreat.security_threat_id == security_threat_id)\

    return query.first()


def custom_asdict(dictable_model):
    exclude = ['organization_security_threat_id']
    follow = {
        'security_threat': {'only': ['id', 'name']}
    }
    return dictable_model.asdict(follow=follow, exclude=exclude)
